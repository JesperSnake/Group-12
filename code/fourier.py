import math
import numpy as np
from scipy.fft import fft, ifft, fftfreq
import matplotlib.pyplot as plt

############# TWEAK THIS
Highest_freqs = 3
smooth_values = [53.327139997284796, 53.575198239959434, 54.31093332434221, 55.04710723227917, 55.78347715221984, 56.289164355732126, 56.80087791275838, 57.614583438858325, 57.68611040842022, 57.76038166184553, 58.16171024065662, 57.749597505261036, 57.30801581742793, 57.184445651120114, 56.079185132666105, 54.844629569316, 52.74348967546007, 51.147252016446856, 48.579477141683526, 45.72157116341558, 42.35119424054136, 38.77548164856496, 35.64140848728713, 31.861833033634557, 28.93194242275872, 25.761633042613866, 23.512168662285568, 21.742584271381336, 20.451129362152177, 19.58987223744984, 18.872312690442747, 18.463496792414645, 18.106412815809072, 18.153500650740618, 18.35999006756218, 19.672849831638924, 21.718090002869836, 23.51216866228555, 25.110002745455887, 26.028023862071613, 27.329583624838442, 29.05150149554342, 30.049078178211346, 30.99761466412355, 32.3039170509053, 34.75591255354137, 37.97603430384338, 41.10303801989639, 43.56052932728234, 45.05796007155846, 46.38995452275715, 47.45085263777103, 48.48754420214087, 49.42352752587327, 50.406909390735386, 51.14331318601058, 51.92852134714815, 52.7672253139538, 53.349810714725535, 53.82037955202106, 53.82037955202106, 53.82037955202106, 53.45805811416539, 52.50662467637607, 51.688996903139035, 50.219024925445545, 48.72942515831347, 47.188959015938195, 45.84527397420536, 45.09475379916575, 44.957658484386116, 45.077847478608824, 45.462368706021444, 46.505876308038765, 47.977372377646034, 49.74145513307692, 51.7414352936864, 53.583700423298936, 55.2837878665527, 57.383790377529095, 58.87384155263244, 60.500722796006954, 62.05036609613643, 62.85604607232161, 62.780915821900194, 62.69530259875193, 62.29751913344275, 61.25490297986284, 60.04902968352519, 57.632216248822196, 54.84462956931599, 51.13222249767931, 47.05258931094677, 42.596144076394246, 36.86386206390984, 31.861833033634543, 28.00163481263642, 25.328774328888198, 23.725698821996783, 22.16081373949726, 22.174559553904363, 23.35438598229524, 24.328042115567253, 25.621995944606983, 25.83945456236855, 26.6273799852496, 27.740001877992146, 30.216030169936833, 33.726559626960395, 37.53047658457276, 41.00546803526573, 44.04847739755713, 46.41620051819095, 48.48907915530354, 50.83546173111888, 52.74348967546007, 54.27549704570297, 55.78619444661105, 56.693658252994354, 57.78086713592196, 58.74813973226567, 60.06931634860945, 60.823745682163924, 61.69924423399363, 62.62973909999577, 63.4883594567693, 64.41230334027945, 65.40877998094196, 66.48599914561224, 67.52089688429007, 68.29695227025935, 69.00192171405982, 69.77719545412398, 70.0573562165065, 69.76386472606397, 69.44155183714027, 68.60519889701837, 66.840367649596, 65.13579342371284, 62.61427015046494, 60.905950130495725, 59.38938261603566, 58.81559328975105, 58.94017169756499, 59.81985458686226, 61.058859763023015, 64.0078875206055, 66.30784714082411, 69.68038882579675, 73.0941441763892, 77.89200596611694, 80.7689565930557, 83.94970769806504, 87.38289141448946, 88.60351381231494, 90.0, 88.29018595585848, 86.19624501061122, 83.41293034592277, 79.9461989570076, 71.9936899097801, 61.99211260496584, 46.57607621523011, 30.647462658534234, 18.872312690442747, 8.453683344858863, 4.189475188788498, 1.186848531081027, 0.0, 0.0, 0.7993686280771579, 2.846499746772403, 5.041350243404162, 8.012105917092203, 11.489104571974014, 14.379636296746547, 17.64002191583416, 21.711628585204906, 26.075566867932835, 29.221305196831427, 31.066648855623697, 31.032489439977457, 29.469794606886225, 28.037338899693765, 27.96552683823663, 30.14608680022499, 33.781367380647524, 38.74959406657162, 44.10283858551753, 48.856766724151925, 52.19077635553962, 54.94068924619316, 56.67959190233327, 58.15852260977819, 59.04189589029389, 59.811281165731664, 60.10416304052887, 60.40920633541744, 60.58015975797622, 60.367804696625015, 60.145657964447864, 59.343816837967104, 58.67385625751849, 57.79859614748919, 56.45783993382023, 55.484435623708684, 53.82037955202106, 52.12501634890181, 49.995065918174866, 48.09905949867435, 46.46515120380802, 45.11079484613339, 43.795368241549674, 43.01526169939038, 42.92632459884253, 43.0803255208482, 43.79250727836304, 44.819278328652395, 45.833654744548035, 47.52356600206314, 49.01543705944674, 50.902564151637996, 52.63434160936035, 54.42278061353508, 55.879688008514556, 57.661970758137, 58.91256508106202, 60.257996730959356, 60.99577764943652, 61.5943564238141, 62.25320908103179, 61.554010485644916, 61.41304195478164, 59.93001262883984, 58.3014025089556, 55.14211683282882, 51.776015442394566, 47.333455645144646, 42.916554546686896, 38.00197388737069, 33.92661038202707, 30.247883160866223, 27.146714234583353, 24.76263193907473, 23.545064736724793, 22.970997511158732, 24.201629432789414, 26.338810380508956, 29.066710034590617, 31.086810222549353, 31.337096472835288, 29.671371356229454, 26.137238525448936, 22.358137207602585, 19.159303423938873, 16.246218098658918, 14.042953754188844, 13.33745410590422, 14.014405690460038, 14.888954898723005, 14.755592381330038, 13.789067350280565, 12.947752180602459, 12.612070045653901, 10.429462515772501, 6.434112663457955, 4.296500374907096, 8.734314704366593, 18.68353531517572, 29.275523879710285, 37.01474670826285, 41.902308957794816, 44.621308865219824, 46.13355852175464, 46.38351782653877, 46.30671881740745, 45.978390689255136, 45.37226815493556, 44.55950058710012, 43.51753812094929, 42.21761436544638, 41.04661771713236, 39.76105603229209, 38.87640994674529, 38.389591316531806, 38.389591316531806, 39.321529890472995, 40.24634102186784, 41.376405092889385, 43.049393304677025, 44.32397497683801, 45.62090318061189, 47.05258931094677, 48.6632790301428, 49.8138921280983, 51.18410119623457, 52.269446180699276, 52.82222630485672, 53.20939943168983, 53.200146059498806]

############################


def Normalize(data):

    min_val = np.min(data)
    max_val = np.max(data)
    normalized_data = ((data - min_val) / (max_val - min_val) - 0.5 ) * 2
    return normalized_data

smooth_values = Normalize(smooth_values)

# Frame rate of the camera in frames per second
frame_rate = 30.0  
sampling_interval = 1.0 / frame_rate  # Sampling interval in seconds

# Perform the Fourier transform
N = len(smooth_values)
y_fft = fft(smooth_values)
yf = fftfreq(N, sampling_interval)[:N//2]
y_fft_magnitude = 2.0/N * np.abs(y_fft[0:N//2])

# Generate time vector based on sampling interval
time_vector = np.arange(N) * sampling_interval


# FILTER
magnitudes = np.abs(y_fft)
top_indices = np.argsort(magnitudes)[-Highest_freqs*2:]   


filtered_y_fft = np.copy(y_fft)
filtered_y_fft = np.zeros_like(y_fft)
filtered_y_fft[top_indices] = y_fft[top_indices]


# Perform the inverse Fourier transform
reconstructed_signal = ifft(filtered_y_fft).real

# Plot the original signal
plt.figure(figsize=(12, 8))

plt.subplot(4, 1, 1)
plt.plot(time_vector, smooth_values)
plt.title('Original Signal')
plt.xlabel('Time [s]')
plt.ylabel('x-position')

# Plot the Fourier transform magnitude
plt.subplot(4, 1, 2)
plt.bar(yf[:N], y_fft_magnitude[:N], width=0.1)
plt.title('Fourier Transform')
plt.xlabel('Frequency [Hz]')
plt.ylabel('Magnitude')

plt.subplot(4, 1, 3)
plt.bar(yf[:N//2], 2.0/N * np.abs(filtered_y_fft[:N//2]), width=0.1)
plt.title('Filtered Fourier Transform')
plt.xlabel('Frequency [Hz]')
plt.ylabel('Magnitude')

# Plot the reconstructed signal
plt.subplot(4, 1, 4)
plt.plot(time_vector, reconstructed_signal)
plt.title('Reconstructed Signal from Inverse Fourier Transform')
plt.xlabel('Time [s]')
plt.ylabel('x-position')

plt.tight_layout()
plt.show()
